def tic_tac_toe(board, player, parse_board=lambda lines: [list(line) for line in lines.splitlines()], find_spaces=lambda board: [(x, y) for x in range(3) for y in range(3) if board[y][x] == ' '], is_winning_move=lambda board, player, pos, checks: any([all([board[check[1]][check[0]] == player for check in l]) for l in checks[pos]]), checks={ (0, 0): [[(1, 0), (2, 0)], [(1, 1), (2, 2)], [(0, 1), (0, 2)]], (0, 1): [[(0, 0), (0, 2)], [(1, 1), (2, 1)]], (0, 2): [[(0, 0), (0, 1)], [(1, 2), (2, 2)], [(1, 1), (2, 0)]], (1, 0): [[(0, 0), (2, 0)], [(1, 1), (1, 2)]], (1, 1): [[(0, 0), (2, 2)], [(0, 2), (2, 0)], [(0, 1), (2, 1)], [(1, 0), (1, 2)]], (1, 2): [[(0, 2), (2, 2)], [(1, 0), (1, 1)]], (2, 0): [[(0, 0), (1, 0)], [(0, 2), (1, 1)], [(2, 2), (2, 1)]], (2, 1): [[(2, 0), (2, 2)], [(0, 1), (1, 1)]], (2, 2): [[(2, 0), (2, 1)], [(0, 0), (1, 1)], [(0, 2), (1, 2)]] }, fancify=lambda pos: f"{chr(65 + pos[1])}{pos[0] + 1}"): return fancify([space for space in find_spaces(parse_board(board)) if is_winning_move(parse_board(board), player, space, checks)][0]) # "os one-liners do Miguel" :(
